library - sockjs, stomp

let sock = null;
let stmp = null;
let path = "/api/ws?token=jwt_token_here"

//connect to websocket
function connect() {
    sock = new SockJS(path);
    stmp = StompJs.Stomp.over(sock);
    stmp.activate();
}

// send message to a user
function send(message) {
    stmp.send('/ms/secure/,{header if any}, message)
}

// subscribe to channel
// have to subsribe to /messages/myEmail not any other channel
// let data = message.body

function subscribe() {
    stmp.subscribe('/messages/'+myEmail, function (message) {
        if(message.body) {
            console.log(message.body);

        } else {
            console.log(message)
        }
    })
}


// call api

1) Alice makes call request to bob
	url = 'http://localhost:8080/api/stego/request/bobmail',
	method = get
	res = ring end time or 403 status if offline or busy
	ui - show calling to bob till ring end time

	after alice makes request to bob, bob will receive a websocket message,
	message = {
		MESSAGE_TYPE = 'CALL_REQUEST',
		ringEndTime = long,
		userDto = {
			email,
			name,
			avatarUrl
		}
	}

2) Bob accepts request
	url = 'http://localhost:8080/api/stego/request/accept',
	method = post
	Info about alice
	res = {
		email,
		name,
		avatarUrl
	}

	Alice get a websocket message
	message = {
		MESSAGE_TYPE = 'CALL_REQUEST_ACCEPT',
		acceptedBy = {
			email,
			name,
			avatarUrl
		}
	}
3) Bob rejects request
	url = 'http://localhost:8080/api/stego/request/accept',
	method = post
	Info about alice
	res = {
		email,
		name,
		avatarUrl
	}
	Alice get a websocket message
	message = {
		MESSAGE_TYPE = 'CALL_REQUEST_REJECT',
		rejectedBy = {
			email,
			name,
			avatarUrl
		}
	}
3) Bob ends call
	url = 'http://localhost:8080/api/stego/call/end',
	method = post

	Alice get a websocket message
	message = {
		MESSAGE_TYPE = 'END_OF_CALL',
	}

#NUMBER_PROMPT WORKING
1) Generate an image
2) When user enters a secret and submits then
	a) Generate public key and private key
	b) Cipher public key into image
	c) Upload image to /api/stego/upload/image , post request

# Getting public key of friend
1) User receives a websocket message with messagetype = STEGO_IMAGE , (attribute = imageLink)
messages cannot be encrypted before this message.

2) Fetch the image present in STEGO_IMAGE message
3) Use the secret to decipher public key from image.
